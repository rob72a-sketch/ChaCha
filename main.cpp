// main.cpp
#include "CChaCha.h"

CChaCha*      pCh = NULL;

void app_init();
void app_destroy();

void app_init()
{
    pCh = new CChaCha();
    pCh->SetNumRounds(20);

}
//-----------------------------------------------
void app_destroy()
{
  if(pCh)
  {
      delete pCh;
      pCh = NULL;
  }
}
//-----------------------------------------------
int main()
{
    uint8_t key[32] =
    {
        0x00, 0x01, 0x02, 0x03,
        0x05, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b,
        0x1c, 0x1d, 0x1e, 0x1f
    };
    uint8_t nonce[12] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00
    };

    uint8_t plaintext[114] = {
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
        0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
        0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
        0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
        0x74, 0x2e
    };

    uint8_t encrypt[114];
    uint8_t decrypt[114];

    atexit(app_destroy);
    app_init();

    pCh->SetKey(key);
    pCh->SetNonce(nonce);

    printf("\n\n\nPLAINTEXT:\n");

    for(int i = 0; i < 114; i++)
        {printf("%02X ", plaintext[i]);}

    // Encrypt
    pCh->SetCounter(1);
    pCh->EncDec(&plaintext[0], 114, &encrypt[0]);

    printf("\n\n\nENCRYPTED:\n");
/*
 * 3f 87 4c a4 bf ec 8c 79 30 e5 b6 c2 82 cd 96 de
 * 80 12 0f 25 e5 78 97 e9 ea bd 82 cf f6 5a ae 74
 * 43 e9 a1 12 21 0f 69 78 31 4c 94 3d 6e 8d e6 37
 * 22 99 4b 0d 1a 1a 1c 75 11 d1 3f fb 56 62 57 be
 * a0 4f 23 53 9e 6e a3 86 c0 a2 82 93 c7 78 78 c2
 * 76 41 f7 e1 40 62 a7 60 41 27 82 16 6b 29 5a 9e
 * dd 33 9a 0b 2d f0 44 5b 22 b3 a7 d7 38 e7 f5 9b
 * e5 1f
*/
    for(int i = 0; i < 114; i++)
        {printf("%02X ", encrypt[i]);}

    // Decrypt
    pCh->SetCounter(1);
    pCh->EncDec(&encrypt[0], 114, &decrypt[0]);

    printf("\n\n\nDECRYPTED:\n");
    for(int i = 0; i < 114; i++)
        {printf("%02X ", decrypt[i]);}

    app_destroy();
    return 0;
}
